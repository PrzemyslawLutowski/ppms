###########
# BUILDER #
###########

# Używamy nowszego, lżejszego obrazu bazowego opartego na Pythonie 3.11 i Debianie Bookworm (12).
# Działają w nim aktualne repozytoria, więc nie potrzeba sed.
FROM python:3.11-slim-bookworm

# Ustawiamy zmienne środowiskowe
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Ustawiamy katalog roboczy. Tworzy katalog /ppms, jeśli nie istnieje.
WORKDIR /ppms

# INSTALACJA ZALEŻNOŚCI

# 1. Kopiujemy plik z zależnościami (dla optymalnego cachowania)
COPY requirements.txt /ppms/

# 2. Instalacja pakietów systemowych i czyszczenie cache APT
# Dzielimy te kroki dla lepszej czytelności i kontroli.
# Pamiętaj, aby dodać tutaj wszystkie niezbędne pakiety systemowe potrzebne do zbudowania zależności Pythona (np. build-essential, libpq-dev).
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        # Przykładowe pakiety systemowe dla budowania (jeśli potrzebne):
        # build-essential \
        # libpq-dev \
        nano \
    # Usuwamy pliki cache APT, aby zredukować rozmiar warstwy (czystość)
    && rm -rf /var/lib/apt/lists/*

# 3. Instalacja zależności Pythona (niepotrzebne jest oddzielne polecenie na upgrade pip)
RUN pip install -r requirements.txt

# 4. KOPIOWANIE KODU APLIKACJI
# Kopiujemy resztę kodu do katalogu roboczego (na końcu, aby wykorzystać cache)
COPY . /ppms/

# 5. Definicja punktu wejścia/startu (Przykład, jeśli używasz Django/Flask)
# Zmień na faktyczną komendę, np. gunicorn:
# CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]